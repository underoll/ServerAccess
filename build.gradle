plugins {
    id 'java'
    id 'info.solidsoft.pitest' version '1.1.1'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

repositories {
    maven {url 'http://maven-eclipse.github.io/maven'}
}

group = 'ru.naumen'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations {
    win32swt
    win64swt
    lin64swt
    macosxswt
}

ext {
    swtVersion = '4.6'
}

def detectVersion() {
    try {
        def rawVersion = 'git describe'.execute().text.trim()
        def extractedVersion = rawVersion =~ /serveraccess-([0-9.]*(-[0-9]+)?)/
        return extractedVersion[0][1]
    } catch (e) {
        return 'devel'
    }
}

def currentVersion = detectVersion()

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.hierynomus:sshj:0.17.2'
    compile files('lib/mindterm.jar')
    compile 'org.apache.httpcomponents:httpclient:4.2.5'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.slf4j:slf4j-log4j12:1.7.21'
    compile 'log4j:log4j:1.2.17'

    compileOnly "org.eclipse.swt:org.eclipse.swt.gtk.linux.x86_64:${swtVersion}"

    win32swt "org.eclipse.swt:org.eclipse.swt.win32.win32.x86:${swtVersion}"
    win64swt "org.eclipse.swt:org.eclipse.swt.win32.win32.x86_64:${swtVersion}"
    lin64swt "org.eclipse.swt:org.eclipse.swt.gtk.linux.x86_64:${swtVersion}"
    macosxswt "org.eclipse.swt:org.eclipse.swt.cocoa.macosx.x86_64:${swtVersion}"

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

jar {
    manifest {
        attributes 'Main-Class': 'ru.naumen.servacc.ui.Main'
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task shadowJarWin32(type: ShadowJar) {
    configureShadowJarArch(shadowJarWin32, '32', project.configurations.win32swt)
}

task shadowJarWin64(type: ShadowJar) {
    configureShadowJarArch(shadowJarWin64, '64', project.configurations.win64swt)
}

task shadowJarLin64(type: ShadowJar) {
    configureShadowJarArch(shadowJarLin64, '64', project.configurations.lin64swt)
}

task shadowJarMacosx(type: ShadowJar) {
    configureShadowJarArch(shadowJarMacosx, '64', project.configurations.macosxswt)
}

def configureShadowJarArch(ShadowJar shadowJarArch, String arch, Configuration swtConfig) {
    shadowJarArch.with {
        description = "${shadowJar.description} for ${arch} platform"
        conventionMapping.with {
            map('classifier') {
                'all'
            }
        }

        destinationDir = file(shadowJar.destinationDir.getPath() + "/${arch}")
        manifest.from 'resource/MANIFEST.MF'
        from sourceSets.main.output
        configurations = [project.configurations.compile.copyRecursive(), swtConfig.copyRecursive()]
        exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    }
}

task prepareRelease {dependsOn build} << {
    copy {
        from 'resource/server-access'
        from 'resource/log4j.properties'
        into 'build/libs'
    }
}

task win32 {dependsOn prepareRelease, shadowJarWin32} << {
    exec {
        workingDir 'nsis'
        commandLine 'makensis', '-DArch=32', '-DbuildVersion=' + currentVersion, 'serveraccess2.nsi'
        standardOutput = new FileOutputStream('build/nsis32.out')
        errorOutput = new FileOutputStream('build/nsis32.err')
    }
}

task win64 {dependsOn prepareRelease, shadowJarWin64} << {
    exec {
        workingDir 'nsis'
        commandLine 'makensis', '-DArch=64', '-DbuildVersion=' + currentVersion, 'serveraccess2.nsi'
        standardOutput = new FileOutputStream('build/nsis64.out')
        errorOutput = new FileOutputStream('build/nsis64.err')
    }
}

task lin64 {dependsOn prepareRelease, shadowJarLin64} << {}

task macosx {dependsOn build, shadowJarMacosx} << {

    copy {
        from zipTree('resource/ServerAccess.app.tmpl.zip')
        into 'build/libs'
    }
    copy {
        from configurations.runtime
        into 'build/libs/ServerAccess.app/Contents/MacOS'
    }
    copy {
        from 'resource/log4j.properties'
        from 'build/libs/64/ServerAccess-all.jar'
        from 'resource/scripts/serveraccess'
        into 'build/libs/ServerAccess.app/Contents/MacOS'
    }
}

// vim: set ft=groovy:
